// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  
  // Receipt Tracker specific fields
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  ownedGroups   Group[] @relation("GroupOwner")
  groupMembers  GroupMember[]
  receipts      Receipt[]
  expenseShares ExpenseShare[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  owner       User     @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     GroupMember[]
  receipts    Receipt[]
}

model GroupMember {
  id      String @id @default(cuid())
  groupId String
  userId  String
  role    String @default("member") // "member" or "admin"
  joinedAt DateTime @default(now())
  
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([groupId, userId])
}

model Receipt {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  totalAmount Float
  currency    String   @default("USD")
  date        DateTime
  uploadedById String
  groupId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  uploadedBy  User     @relation(fields: [uploadedById], references: [id])
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  items       ReceiptItem[]
  expenses    Expense[]
}

model ReceiptItem {
  id        String @id @default(cuid())
  receiptId String
  name      String
  quantity  Int    @default(1)
  price     Float
  category  String?
  
  receipt   Receipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)
}

model Expense {
  id        String @id @default(cuid())
  receiptId String
  name      String
  amount    Float
  createdAt DateTime @default(now())
  
  receipt   Receipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  shares    ExpenseShare[]
}

model ExpenseShare {
  id        String @id @default(cuid())
  expenseId String
  userId    String
  amount    Float
  isPaid    Boolean @default(false)
  paidAt    DateTime?
  
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([expenseId, userId])
}